{"version":3,"sources":["components/Button.jsx","components/Display.jsx","main/Calculator.jsx","serviceWorker.js","index.js"],"names":["components_Button","props","react_default","a","createElement","onClick","e","click","label","className","concat","operation","twoColumn","threeColumn","components_Display","value","initialState","displayValue","clearDisplay","values","current","Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","objectSpread","clearMemory","setState","bind","assertThisInitialized","setOperation","addDigit","equals","currentOperation","toConsumableArray","num1","num2","op","calculation","n","includes","i","newValue","parseFloat","Component","Boolean","window","location","hostname","match","ReactDOM","render","Calculator_Calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de52dd49.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nexport default (props) => \n  <button \n    onClick={e => props.click(props.label)}\n    className={`\n      button\n      ${props.operation ? 'operation' : ''}\n      ${props.twoColumn ? 'twoColumn' : ''}\n      ${props.threeColumn ? 'threeColumn' : ''}\n    `}\n  >\n    {props.label}\n  </button>","import React from 'react';\nimport './Display.css';\n\nexport default (props) =>\n  <div\n    className=\"display\"\n  >\n    {props.value}\n  </div>","import React, { Component } from 'react';\nimport './Calculator.css';\n\nimport Button from '../components/Button';\nimport Display from '../components/Display';\n\nconst initialState = {\n  displayValue: '0',\n  clearDisplay: false,\n  operation: null,\n  values: [0, 0],\n  current: 0\n};\n\nconst calculation = (num1, num2, op) => {\n  switch (op) {\n    case '+':\n      return num1 + num2;\n\n    case '-':\n      return num1 - num2;\n\n    case '*':\n      return num1 * num2;\n\n    case '/':\n      return num1 / num2;\n    \n    default:\n      break;\n  }\n}\n\nexport default class Calculator extends Component {\n  state = { ...initialState }\n\n  constructor(props) {\n    super(props);\n\n    this.clearMemory = this.clearMemory.bind(this);\n    this.setOperation = this.setOperation.bind(this);\n    this.addDigit = this.addDigit.bind(this);\n  }\n\n  clearMemory = () => {\n    this.setState({ ...initialState });\n  }\n\n  setOperation(operation) {\n    if(this.state.current === 0) {\n      this.setState({ \n        operation,\n        clearDisplay: true,\n        current: 1 \n      });\n    } else {\n      const equals = operation === '=';\n      const currentOperation = this.state.operation;\n\n      const values = [...this.state.values]\n\n      values[0] = calculation(values[0], values[1], currentOperation);\n      \n      values[1] = 0;\n\n      this.setState({\n        displayValue: values[0],\n        operation: equals ? null : operation,\n        current: equals ? 0 : 1,\n        clearDisplay: !equals,\n        values\n      });\n    }\n  }\n\n  addDigit(n) {\n    if (n === '.' && this.state.displayValue.includes('.')) {\n      return\n    }\n\n    const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay;\n    const currentValue = clearDisplay ? '' : this.state.displayValue;\n    const displayValue = currentValue + n;\n    this.setState({ displayValue, clearDisplay: false });\n\n    if (n !== '.') {\n      const i = this.state.current;\n      const newValue = parseFloat(displayValue);\n      const values = [...this.state.values];\n      values[i] = newValue;\n      this.setState({ values });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"calculator\">\n        <Display value={this.state.displayValue}/>\n        <Button label=\"AC\" click={this.clearMemory} threeColumn/>\n        <Button label=\"/\" click={this.setOperation} operation/>\n        <Button label=\"7\" click={this.addDigit}/>\n        <Button label=\"8\" click={this.addDigit}/>\n        <Button label=\"9\" click={this.addDigit}/>\n        <Button label=\"*\" click={this.setOperation} operation/>\n        <Button label=\"4\" click={this.addDigit}/>\n        <Button label=\"5\" click={this.addDigit}/>\n        <Button label=\"6\" click={this.addDigit}/>\n        <Button label=\"-\" click={this.setOperation} operation/>\n        <Button label=\"1\" click={this.addDigit}/>\n        <Button label=\"2\" click={this.addDigit}/>\n        <Button label=\"3\" click={this.addDigit}/>\n        <Button label=\"+\" click={this.setOperation} operation/>\n        <Button label=\"0\" click={this.addDigit} twoColumn/>\n        <Button label=\".\" click={this.addDigit}/>\n        <Button label=\"=\" click={this.setOperation} operation/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div>\n    <h1>Calculator</h1>\n    <Calculator />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}